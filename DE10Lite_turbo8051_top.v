
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module DE10Lite_turbo8051_top(
	ADC_CLK_10,
	MAX10_CLK1_50,
	MAX10_CLK2_50,
	DRAM_ADDR,
	DRAM_BA,
	DRAM_CAS_N,
	DRAM_CKE,
	DRAM_CLK,
	DRAM_CS_N,
	DRAM_DQ,
	DRAM_LDQM,
	DRAM_RAS_N,
	DRAM_UDQM,
	DRAM_WE_N,
	HEX0,
	HEX1,
	HEX2,
	HEX3,
	HEX4,
	HEX5,
	KEY,
	LEDR,
	SW,
	VGA_B,
	VGA_G,
	VGA_HS,
	VGA_R,
	VGA_VS,
	GSENSOR_CS_N,
	GSENSOR_INT,
	GSENSOR_SCLK,
	GSENSOR_SDI,
	GSENSOR_SDO,
	ARDUINO_IO,
	ARDUINO_RESET_N,
	GPIO
);

	//////////// CLOCK //////////
	input ADC_CLK_10;
	input MAX10_CLK1_50;
	input MAX10_CLK2_50;

	//////////// SDRAM //////////
	output [12:0] DRAM_ADDR;
	output [1:0] DRAM_BA;
	output DRAM_CAS_N;
	output DRAM_CKE;
	output DRAM_CLK;
	output DRAM_CS_N;
	inout [15:0] DRAM_DQ;
	output DRAM_LDQM;
	output DRAM_RAS_N;
	output DRAM_UDQM;
	output DRAM_WE_N;

	//////////// SEG7 //////////
	output [7:0] HEX0;
	output [7:0] HEX1;
	output [7:0] HEX2;
	output [7:0] HEX3;
	output [7:0] HEX4;
	output [7:0] HEX5;

	//////////// KEY //////////
	input [1:0] KEY;

	//////////// LED //////////
	output [9:0] LEDR;

	//////////// SW //////////
	input [9:0] SW;

	//////////// VGA //////////
	output [3:0] VGA_B;
	output [3:0] VGA_G;
	output VGA_HS;
	output [3:0] VGA_R;
	output VGA_VS;

	//////////// Accelerometer //////////
	output GSENSOR_CS_N;
	input [2:1] GSENSOR_INT;
	output GSENSOR_SCLK;
	inout GSENSOR_SDI;
	inout GSENSOR_SDO;

	//////////// Arduino //////////
	inout [15:0] ARDUINO_IO;
	inout ARDUINO_RESET_N;

	//////////// GPIO; GPIO connect to GPIO Default //////////
	inout [35:0] GPIO;



	//=======================================================
	//  REG/WIRE declarations
	//=======================================================

	wire w_reset = KEY[0];
	wire w_reset_n = ~KEY[0];

	wire w_ea;

	wire w_clock_core;
	wire w_pll_locked;

	wire w_spi_clk;
	wire w_spi_mosi;
	wire w_spi_miso;
	wire [3:0] w_spi_csn;
	wire w_spi_csn0;
	wire w_spi_csn1;
	wire w_spi_csn2;
	wire w_spi_csn3;

	assign w_spi_csn0 = w_spi_csn[0];
	assign w_spi_csn1 = w_spi_csn[1];
	assign w_spi_csn2 = w_spi_csn[2];
	assign w_spi_csn3 = w_spi_csn[3];

	wire w_uart_tx;
	wire w_uart_rx;


	//=======================================================
	//  Structural coding
	//=======================================================

	turbo8051_top_pll turbo8051_top_pll_inst(
		.areset(w_reset_n),
		.inclk0(MAX10_CLK1_50),
		.c0(w_clock_core),
		.locked(w_pll_locked)
	);


	turbo8051 turbo8051_inst(
		.reset_n(w_reset_n),					// input  reset_n_sig
		.fastsim_mode(),		// input  fastsim_mode_sig
		.mastermode(),			// input  mastermode_sig
		.xtal_clk(w_clock_core),				// input  xtal_clk_sig
		.clkout(),					// output  clkout_sig
		.reset_out_n(),			// output  reset_out_n_sig
		.ext_reg_cs(),			// input  ext_reg_cs_sig
		.ext_reg_tid(),			// input [3:0] ext_reg_tid_sig
		.ext_reg_wr(),			// input  ext_reg_wr_sig
		.ext_reg_addr(),		// input [14:0] ext_reg_addr_sig
		.ext_reg_wdata(),		// input [31:0] ext_reg_wdata_sig
		.ext_reg_be(),			// input [3:0] ext_reg_be_sig
		.ext_reg_rdata(),		// output [31:0] ext_reg_rdata_sig
		.ext_reg_ack(),			// output  ext_reg_ack_sig
		.phy_tx_en(),				// output  phy_tx_en_sig
		.phy_txd(),					// output [7:0] phy_txd_sig
		.phy_tx_clk(),			// input  phy_tx_clk_sig
		.phy_rx_clk(),			// input  phy_rx_clk_sig
		.phy_rx_dv(),				// output  phy_rx_dv_sig
		.phy_rxd(),					// output [7:0] phy_rxd_sig
		.MDC(),							// output  MDC_sig
		.MDIO(),						// inout  MDIO_sig
		.si(w_uart_rx),							// input  si_sig
		.so(w_uart_tx),							// output  so_sig
		.spi_sck(w_spi_clk),					// output  spi_sck_sig
		.spi_so(w_spi_mosi),					// output  spi_so_sig
		.spi_si(w_spi_miso),					// input  spi_si_sig
		.spi_cs_n(w_spi_csn),				// output [3:0] spi_cs_n_sig
		.wb_xrom_adr(),			// output [15:0] wb_xrom_adr_sig
		.wb_xrom_ack(),			// input  wb_xrom_ack_sig
		.wb_xrom_err(),			// output  wb_xrom_err_sig
		.wb_xrom_wr(),			// output  wb_xrom_wr_sig
		.wb_xrom_rdata(),		// input [31:0] wb_xrom_rdata_sig
		.wb_xrom_wdata(),		// output [31:0] wb_xrom_wdata_sig
		.wb_xrom_stb(),			// output  wb_xrom_stb_sig
		.wb_xrom_cyc(),			// output  wb_xrom_cyc_sig
		.wb_xram_adr(),			// output [15:0] wb_xram_adr_sig
		.wb_xram_ack(),			// input  wb_xram_ack_sig
		.wb_xram_err(),			// output  wb_xram_err_sig
		.wb_xram_wr(),			// output  wb_xram_wr_sig
		.wb_xram_be(),			// output [3:0] wb_xram_be_sig
		.wb_xram_rdata(),		// input [31:0] wb_xram_rdata_sig
		.wb_xram_wdata(),		// output [31:0] wb_xram_wdata_sig
		.wb_xram_stb(),			// output  wb_xram_stb_sig
		.wb_xram_cyc(),			// output  wb_xram_cyc_sig
		.ea_in(w_ea)						// input  ea_in_sig
	);



endmodule
