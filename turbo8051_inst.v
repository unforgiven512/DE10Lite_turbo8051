// Copyright (C) 2024  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.


// Generated by Quartus Prime Version 23.1 (Build Build 993 05/14/2024)
// Created on Tue Oct  8 08:36:35 2024

turbo8051 turbo8051_inst(
	.reset_n(reset_n_sig),					// input  reset_n_sig
	.fastsim_mode(fastsim_mode_sig),		// input  fastsim_mode_sig
	.mastermode(mastermode_sig),			// input  mastermode_sig
	.xtal_clk(xtal_clk_sig),				// input  xtal_clk_sig
	.clkout(clkout_sig),					// output  clkout_sig
	.reset_out_n(reset_out_n_sig),			// output  reset_out_n_sig
	.ext_reg_cs(ext_reg_cs_sig),			// input  ext_reg_cs_sig
	.ext_reg_tid(ext_reg_tid_sig),			// input [3:0] ext_reg_tid_sig
	.ext_reg_wr(ext_reg_wr_sig),			// input  ext_reg_wr_sig
	.ext_reg_addr(ext_reg_addr_sig),		// input [14:0] ext_reg_addr_sig
	.ext_reg_wdata(ext_reg_wdata_sig),		// input [31:0] ext_reg_wdata_sig
	.ext_reg_be(ext_reg_be_sig),			// input [3:0] ext_reg_be_sig
	.ext_reg_rdata(ext_reg_rdata_sig),		// output [31:0] ext_reg_rdata_sig
	.ext_reg_ack(ext_reg_ack_sig),			// output  ext_reg_ack_sig
	.phy_tx_en(phy_tx_en_sig),				// output  phy_tx_en_sig
	.phy_txd(phy_txd_sig),					// output [7:0] phy_txd_sig
	.phy_tx_clk(phy_tx_clk_sig),			// input  phy_tx_clk_sig
	.phy_rx_clk(phy_rx_clk_sig),			// input  phy_rx_clk_sig
	.phy_rx_dv(phy_rx_dv_sig),				// output  phy_rx_dv_sig
	.phy_rxd(phy_rxd_sig),					// output [7:0] phy_rxd_sig
	.MDC(MDC_sig),							// output  MDC_sig
	.MDIO(MDIO_sig),						// inout  MDIO_sig
	.si(si_sig),							// input  si_sig
	.so(so_sig),							// output  so_sig
	.spi_sck(spi_sck_sig),					// output  spi_sck_sig
	.spi_so(spi_so_sig),					// output  spi_so_sig
	.spi_si(spi_si_sig),					// input  spi_si_sig
	.spi_cs_n(spi_cs_n_sig),				// output [3:0] spi_cs_n_sig
	.wb_xrom_adr(wb_xrom_adr_sig),			// output [15:0] wb_xrom_adr_sig
	.wb_xrom_ack(wb_xrom_ack_sig),			// input  wb_xrom_ack_sig
	.wb_xrom_err(wb_xrom_err_sig),			// output  wb_xrom_err_sig
	.wb_xrom_wr(wb_xrom_wr_sig),			// output  wb_xrom_wr_sig
	.wb_xrom_rdata(wb_xrom_rdata_sig),		// input [31:0] wb_xrom_rdata_sig
	.wb_xrom_wdata(wb_xrom_wdata_sig),		// output [31:0] wb_xrom_wdata_sig
	.wb_xrom_stb(wb_xrom_stb_sig),			// output  wb_xrom_stb_sig
	.wb_xrom_cyc(wb_xrom_cyc_sig),			// output  wb_xrom_cyc_sig
	.wb_xram_adr(wb_xram_adr_sig),			// output [15:0] wb_xram_adr_sig
	.wb_xram_ack(wb_xram_ack_sig),			// input  wb_xram_ack_sig
	.wb_xram_err(wb_xram_err_sig),			// output  wb_xram_err_sig
	.wb_xram_wr(wb_xram_wr_sig),			// output  wb_xram_wr_sig
	.wb_xram_be(wb_xram_be_sig),			// output [3:0] wb_xram_be_sig
	.wb_xram_rdata(wb_xram_rdata_sig),		// input [31:0] wb_xram_rdata_sig
	.wb_xram_wdata(wb_xram_wdata_sig),		// output [31:0] wb_xram_wdata_sig
	.wb_xram_stb(wb_xram_stb_sig),			// output  wb_xram_stb_sig
	.wb_xram_cyc(wb_xram_cyc_sig),			// output  wb_xram_cyc_sig
	.ea_in(ea_in_sig)						// input  ea_in_sig
);

